/*
 * Copyright (c) 2015, TypeZero Engine (game.developpers.com)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of TypeZero Engine nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */


package org.typezero.gameserver.network.aion.serverpackets;

import java.util.ArrayList;
import java.util.List;

import org.typezero.gameserver.network.aion.AionConnection;
import org.typezero.gameserver.network.aion.AionServerPacket;

/**
 * This class is used to send to client packets generated by admins with command //fsc
 *
 * @author Luno
 * @see org.typezero.gameserver.utils.chathandlers.admincommands.SendFakeServerPacket
 */
public class SM_CUSTOM_PACKET extends AionServerPacket {

	/** Enumeration of types of packet elements. */
	public static enum PacketElementType {
		D('d') {

			@Override
			public void write(SM_CUSTOM_PACKET packet,String value) {
				packet.writeD(Integer.decode(value));
			}
		},
		B('b') {

			@Override
			public void write(SM_CUSTOM_PACKET packet,String value) {
			  packet.writeB(new byte[Integer.valueOf(value)]);
			}
		},
		H('h') {

			@Override
			public void write(SM_CUSTOM_PACKET packet,String value) {
				packet.writeH(Integer.decode(value));
			}
		},
		C('c') {

			@Override
			public void write(SM_CUSTOM_PACKET packet,String value) {
				packet.writeC(Integer.decode(value));
			}
		},
		F('f') {

			@Override
			public void write(SM_CUSTOM_PACKET packet,String value) {
				packet.writeF(Float.valueOf(value));
			}
		},
		DF('e') {

			@Override
			public void write(SM_CUSTOM_PACKET packet,String value) {
				packet.writeDF(Double.valueOf(value));
			}
		},
		Q('q') {

			@Override
			public void write(SM_CUSTOM_PACKET packet,String value) {
				packet.writeQ(Long.decode(value));
			}
		},
		S('s') {

			@Override
			public void write(SM_CUSTOM_PACKET packet,String value) {
				packet.writeS(value);
			}
		};

		private final char code;

		private PacketElementType(char code) {
			this.code = code;
		}

		public static PacketElementType getByCode(char code) {
			for (PacketElementType type : values())
				if (type.code == code)
					return type;
			return null;
		}

		/**
		 * Writes <tt>value</tt> to buffer according to the ElementType
		 *
		 * @param packet
		 *          packet instance
		 * @param buf
		 *          packet write buffer
		 * @param value
		 *          element value
		 */
		public abstract void write(SM_CUSTOM_PACKET packet, String value);
	}

	public static class PacketElement {

		private final PacketElementType type;
		private final String value;

		public PacketElement(PacketElementType type, String value) {
			this.type = type;
			this.value = value;
		}

		/**
		 * Writes value stored in this PacketElement into buffer <tt>buf</tt>
		 *
		 * @param packet
		 *          packet instance.
		 * @param buf
		 *          packet write buffer.
		 */
		public void writeValue(SM_CUSTOM_PACKET packet) {
			type.write(packet, value);
		}
	}

	private List<PacketElement> elements = new ArrayList<PacketElement>();

	public SM_CUSTOM_PACKET(int opcode) {
		super();
		setOpcode(opcode);
	}

	/**
	 * Add an element to this packet.
	 *
	 * @param packetElement
	 */
	public void addElement(PacketElement packetElement) {
		elements.add(packetElement);
	}

	/**
	 * Add packet element.
	 *
	 * @param type
	 * @param value
	 */
	public void addElement(PacketElementType type, String value) {
		elements.add(new PacketElement(type, value));
	}

	/** {@inheritDoc} */
	@Override
	public void writeImpl(AionConnection con) {
		for (PacketElement el : elements) {
			el.writeValue(this);
		}
	}
}
